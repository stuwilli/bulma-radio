@use "../node_modules/bulma/sass/utilities/extends" as ex;
@use "../node_modules/bulma/sass/utilities/derived-variables" as dv;
@use "../node_modules/bulma/sass/utilities/initial-variables" as iv;
@use "../node_modules/bulma/sass/utilities/controls" as c;
@use "../node_modules/bulma/sass/utilities/mixins" as mixins;
@use "./variables" as vars;
.b-radio {
  &.radio {
    //@extend %unselectable;
    @include mixins.unselectable();
    outline: none;
    display: inline-flex;
    align-items: center;
    &:not(.button) {
      margin-right: 0.5em;
      & + .radio:last-child {
        margin-right: 0;
      }
    }
    // reset Bulma
    & + .radio {
      margin-left: 0;
    }
    input[type=radio] {
      position: absolute;
      left: 0;
      opacity: 0;
      outline: none;
      z-index: -1;
      + .check {
        display: flex;
        flex-shrink: 0;
        position: relative;
        cursor: pointer;
        width: vars.$radio-size;
        height: vars.$radio-size;
        transition: background vars.$speed-slow iv.$easing;
        border-radius: 50%;
        border: 2px solid iv.$grey;
        &:before {
          content: "";
          display: flex;
          position: absolute;
          left: 50%;
          margin-left: calc(-#{vars.$radio-size} * 0.5);
          bottom: 50%;
          margin-bottom: calc(-#{vars.$radio-size} * 0.5);
          width: vars.$radio-size;
          height: vars.$radio-size;
          transition: transform vars.$speed-slow iv.$easing;
          border-radius: 50%;
          transform: scale(0);
          background-color: vars.$radio-active-background-color;
        }
        @each $name, $pair in vars.$radio-colors {
          $color: nth($pair, 1);
          &.is-#{$name}:before {
            background: $color;
          }
        }
      }
      &:checked + .check {
        border-color: vars.$radio-active-background-color;
        @each $name, $pair in vars.$radio-colors {
          $color: nth($pair, 1);
          &.is-#{$name} {
            border-color: $color;
          }
        }
        &:before {
          transform: scale(.5);
        }
      }
      &:focus {
        + .check {
          box-shadow: 0 0 0.5em rgba(iv.$grey, 0.8);
        }
        &:checked + .check {
          box-shadow: 0 0 0.5em rgba(vars.$radio-active-background-color, 0.8);
          @each $name, $pair in vars.$radio-colors {
            $color: nth($pair, 1);
            &.is-#{$name} {
              box-shadow: 0 0 0.5em rgba($color, 0.8);
            }
          }
        }
      }
    }
    .control-label {
      padding-left: c.$control-padding-horizontal;
    }
    &.button {
      display: flex;

      &.is-selected {
        z-index: 1;
      }
    }
    &[disabled] {
      opacity: 0.5;
    }
    &:hover {
      input[type=radio]:not(:disabled) + .check {
        border-color: vars.$radio-active-background-color;
        @each $name, $pair in vars.$radio-colors {
          $color: nth($pair, 1);
          &.is-#{$name} {
            border-color: $color;
          }
        }
      }
    }
    &.is-small {
      @include c.control-small;
    }
    &.is-medium{
      @include c.control-medium;
    }
    &.is-large {
      @include c.control-large;
    }
  }
}
